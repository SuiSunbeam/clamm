import Decimal from 'decimal.js';
import {BigNumber} from 'bignumber.js';
import {reductionCoefficient, solveD} from './volatile-simulation';

const geometricMean = (x: readonly Decimal[]) => {
  const a = new Decimal(
    x.reduce((acc, num) => acc.times(num), new Decimal(1)).toString(),
  );

  return a.cbrt();
};

const testGeometricMean = (x: readonly Decimal[][]) => {
  for (const item of x) {
    console.log(geometricMean(item).toDecimalPlaces(0).toString());
  }
};

const testReductionCoefficient = (
  x: readonly BigNumber[][],
  fees: BigNumber[],
) => {
  let i = 0;
  for (const item of x) {
    console.log(reductionCoefficient(item, fees[i]).integerValue().toString());
    i = i + 1;
  }
};

// * Test 1
// * 4.8893208131642802669e+50
// * Test 2
// * 2.019022880924599621e+49
// * Test 3
// * 5.4804712762899335589e+49
// * Test 4
// * 8.8423493508808707992e+49
// * Test 5
// * 2.1305618116999345597e+49
testGeometricMean([
  [
    new Decimal('95857402834957293847589374578293847598234578923456789'),
    new Decimal('12345678901234567890123456789012345678901234567890'),
    new Decimal('98765432109876543210987654321098765432109876543210'),
  ],
  [
    new Decimal('11111111111111111111111111111111111111111111111111'),
    new Decimal('22222222222222222222222222222222222222222222222222'),
    new Decimal('33333333333333333333333333333333333333333333333333'),
  ],
  [
    new Decimal('44444444444444444444444444444444444444444444444444'),
    new Decimal('55555555555555555555555555555555555555555555555555'),
    new Decimal('66666666666666666666666666666666666666666666666666'),
  ],
  [
    new Decimal('77777777777777777777777777777777777777777777777777'),
    new Decimal('88888888888888888888888888888888888888888888888888'),
    new Decimal('99999999999999999999999999999999999999999999999999'),
  ],
  [
    new Decimal('12121212121212121212121212121212121212121212121212'),
    new Decimal('23232323232323232323232323232323232323232323232323'),
    new Decimal('34343434343434343434343434343434343434343434343434'),
  ],
]);

// * test 1 - 1000000000000000000 //
// * test 2 - 41887718742576609 //
testReductionCoefficient(
  [
    [
      BigNumber('1000000000000000000'),
      BigNumber('1000000000000000000'),
      BigNumber('1000000000000000000'),
    ],
    [
      BigNumber('12121212121212121212121212121212121212121212121212'),
      BigNumber('23232323232323232323232323232323232323232323232323'),
      BigNumber('34343434343434343434343434343434343434343434343434'),
    ],
    [
      BigNumber('95857402834957293847589374578293847598234578923456789'),
      BigNumber('12345678901234567890123456789012345678901234567890'),
      BigNumber('98765432109876543210987654321098765432109876543210'),
    ],
  ],
  [
    BigNumber('10000000000000000'),
    BigNumber('10000000000000000'),
    BigNumber('10000000000000000'),
  ],
);

console.log(
  solveD(BigNumber(27000), BigNumber(10000000000), [
    BigNumber('76543210987654321098765432'),
    BigNumber('87654321098765432109876543'),
    BigNumber('98765432109876543210987654'),
  ]),
);
