[{"/Users/josemanuelcerqueira/Desktop/amm-v2/test-utils/src/index.ts":"1","/Users/josemanuelcerqueira/Desktop/amm-v2/test-utils/src/volatile-simulation.ts":"2"},{"size":0,"mtime":1699453469247,"results":"3","hashOfConfig":"4"},{"size":868,"mtime":1699454920869,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19810cc",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":null},"/Users/josemanuelcerqueira/Desktop/amm-v2/test-utils/src/index.ts",[],[],"/Users/josemanuelcerqueira/Desktop/amm-v2/test-utils/src/volatile-simulation.ts",["12","13","14","15","16","17","18","19","20","21","22","23","24"],[],{"ruleId":"25","severity":2,"message":"26","line":4,"column":12,"nodeType":"27","messageId":"28","endLine":4,"endColumn":23,"suggestions":"29"},{"ruleId":"30","severity":2,"message":"31","line":4,"column":12,"nodeType":"27","messageId":"32","endLine":4,"endColumn":23},{"ruleId":"30","severity":2,"message":"33","line":5,"column":12,"nodeType":"27","messageId":"32","endLine":5,"endColumn":21},{"ruleId":"34","severity":2,"message":"35","line":5,"column":24,"nodeType":"36","messageId":"37","endLine":5,"endColumn":33},{"ruleId":"38","severity":2,"message":"39","line":5,"column":34,"nodeType":"40","messageId":"41","endLine":5,"endColumn":53,"fix":"42"},{"ruleId":"43","severity":2,"message":"44","line":8,"column":11,"nodeType":"27","messageId":"45","endLine":8,"endColumn":14,"fix":"46"},{"ruleId":"30","severity":2,"message":"47","line":10,"column":9,"nodeType":"27","messageId":"32","endLine":10,"endColumn":10},{"ruleId":"30","severity":2,"message":"48","line":13,"column":11,"nodeType":"27","messageId":"32","endLine":13,"endColumn":17},{"ruleId":"43","severity":2,"message":"49","line":13,"column":11,"nodeType":"27","messageId":"45","endLine":13,"endColumn":17,"fix":"50"},{"ruleId":"51","severity":2,"message":"52","line":13,"column":11,"nodeType":"27","messageId":"53","endLine":13,"endColumn":17,"fix":"54"},{"ruleId":"43","severity":2,"message":"55","line":14,"column":11,"nodeType":"27","messageId":"45","endLine":14,"endColumn":14,"fix":"56"},{"ruleId":"34","severity":2,"message":"35","line":21,"column":9,"nodeType":"36","messageId":"37","endLine":21,"endColumn":18},{"ruleId":"34","severity":2,"message":"35","line":22,"column":19,"nodeType":"36","messageId":"37","endLine":22,"endColumn":28},"@typescript-eslint/class-literal-property-style","Literals should be exposed using getters.","Identifier","preferGetterStyle",["57"],"@typescript-eslint/naming-convention","Class Property name `AMultiplier` must match one of the following formats: strictCamelCase","doesNotMatchFormat","Class Property name `Precision` must match one of the following formats: strictCamelCase","new-cap","A function with a name starting with an uppercase letter should only be used as a constructor.","CallExpression","upper","unicorn/numeric-separators-style","Invalid group length in numeric value.","Literal","numeric-separators-style",{"range":"58","text":"59"},"unicorn/prevent-abbreviations","The variable `len` should be named `length`. A more descriptive name will do too.","replace",{"range":"60","text":"61"},"Variable name `D` must match one of the following formats: strictCamelCase","Variable name `D_prev` must match one of the following formats: strictCamelCase","The variable `D_prev` should be named `D_previous`. A more descriptive name will do too.",{"range":"62","text":"63"},"prefer-const","'D_prev' is never reassigned. Use 'const' instead.","useConst",{"range":"64","text":"65"},"The variable `tmp` should be named `temporary`. A more descriptive name will do too.",{"range":"66","text":"67"},{"messageId":"68","fix":"69","desc":"70"},[130,149],"1_000_000_000_000_000_000",[213,633],"length = x.length;\n    const sortedX = x.slice().sort((a, b) => b.minus(a).toNumber());\n    let D = sortedX[0];\n\n    for (let i = 0; i < 256; i++) {\n      let D_prev = D;\n      let tmp = this.Precision;\n\n      for (const x of sortedX) {\n        tmp = tmp.multipliedBy(x).dividedBy(D);\n      }\n\n      D = D.multipliedBy(\n        Bignumber(length).minus(1).multipliedBy(this.Precision).plus(tmp),\n      ).dividedBy(Bignumber(length",[369,725],"D_previous = D;\n      let tmp = this.Precision;\n\n      for (const x of sortedX) {\n        tmp = tmp.multipliedBy(x).dividedBy(D);\n      }\n\n      D = D.multipliedBy(\n        Bignumber(len).minus(1).multipliedBy(this.Precision).plus(tmp),\n      ).dividedBy(Bignumber(len).multipliedBy(this.Precision));\n\n      const diff = D.gt(D_previous) ? D.minus(D_previous) : D_previous",[365,380],"const D_prev = D;",[391,599],"temporary = this.Precision;\n\n      for (const x of sortedX) {\n        temporary = temporary.multipliedBy(x).dividedBy(D);\n      }\n\n      D = D.multipliedBy(\n        Bignumber(len).minus(1).multipliedBy(this.Precision).plus(temporary","preferGetterStyleSuggestion",{"range":"71","text":"72"},"Replace the literals with getters.",[68,96],"get AMultiplier() { return 1000; }"]